{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jessm\\\\gt\\\\sandbox2\\\\prototype_3\\\\client\\\\src\\\\components\\\\Dictaphone\\\\Dictaphone.js\";\nimport React, { Component } from \"react\";\nimport API from \"../../utils/API\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport \"./Dictaphone.css\"; //------------------------SPEECH RECOGNITION-----------------------------\n\nvar SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\nvar recognition = new SpeechRecognition();\nrecognition.continous = true;\nrecognition.maxAlternatives = 10;\nrecognition.interimResults = true;\nrecognition.lang = \"en-US\";\nlet finalTranscript = \"\";\nlet interimTranscript = \"\"; //------------------------COMPONENT-----------------------------\n\nclass Dictaphone extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleListen = () => {\n      this.setState({\n        // speech recognition\n        listening: !this.state.listening\n      }, // speech recognition\n      this.handleListen);\n    };\n\n    this.handleListen = () => {\n      if (this.state.listening) {\n        recognition.start();\n\n        recognition.onend = () => {\n          recognition.start();\n        };\n      } else {\n        recognition.stop();\n\n        recognition.onend = () => {};\n      } // speech recognition\n      // Interim and final transcript are diplayed on the screen\n\n\n      finalTranscript = \"\";\n\n      recognition.onresult = event => {\n        interimTranscript = \"\";\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcript = event.results[i][0].transcript;\n          if (event.results[i].isFinal) finalTranscript += transcript + \" \";else interimTranscript += transcript; // console.log(finalTranscript);\n        }\n\n        document.getElementById(\"interimTranscript\").innerHTML = interimTranscript;\n        document.getElementById(\"finalTranscript\").innerHTML = finalTranscript; //-------------------------COMMANDS------------------------------------\n        // speech recognition\n        // If the user says and the SpeechRec recognizes, \"stop listening\", the program turns off the recorder\n        // and stops listening if no space between the double quotes in this block then, the program reads\n        // everything like one big long sentence instead of individual strings\n\n        const transcriptArr = finalTranscript.split(\"  \");\n        const stopCmd = transcriptArr.slice(-3, -1); // console.log(\"stopCmd\", stopCmd);\n\n        if (stopCmd[0] === \"stop\" && stopCmd[1] === \"listening\") {\n          recognition.stop();\n\n          recognition.onend = () => {\n            const finalText = transcriptArr.slice(0, -3).join(\" \");\n            document.getElementById(\"finalTranscript\").innerHTML = finalText;\n          };\n        }\n\n        this.setState({\n          sentence: transcriptArr[0]\n        }); // console.log(transcriptArr[0]);\n      }; //-----------------------------------------------------------------------\n      // speech recognition\n\n\n      recognition.onerror = event => {\n        console.log(\"Error occurred in recognition: \" + event.error);\n      };\n    };\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      // Setting state for each individual sentence before submit\n      sentence: \"\",\n      // speech recognition\n      listening: false\n    };\n    this.toggleListen = this.toggleListen.bind(this);\n    this.handleListen = this.handleListen.bind(this);\n    this.resetTranscripts = this.resetTranscripts.bind(this);\n    this.submitTranscripts = this.submitTranscripts.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  } // Toggle listening commands when the Start/Stop button is pressed\n\n\n  // speech recognition\n  // Reset the interim and final transcript to not display anymore\n  resetTranscripts() {\n    document.getElementById(\"interimTranscript\").innerHTML = interimTranscript = \"\";\n    document.getElementById(\"finalTranscript\").innerHTML = finalTranscript = \"\"; // console.log(\"All Records Cleared\");\n  } // speech recognition\n  // Handles updating component state when the user speaks into the input field\n\n\n  // speech recognition\n  // Sumbit your finalTranscript to the database\n  submitTranscripts() {\n    if (this.state.sentence) {\n      API.saveSentence({\n        sentence: this.state.sentence\n      }).catch(err => console.log(err));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      id: \"randomWordContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      id: \"randomWordRow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      id: \"randomWordCol\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"randomWordPlacement\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 19\n      }\n    }))))), /*#__PURE__*/React.createElement(Container, {\n      id: \"finalTranscriptContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"interimTranscript\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"finalTranscript\",\n      value: this.state.sentence,\n      onChange: this.handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(Container, {\n      id: \"buttonContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      id: \"buttonRow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      id: \"recordButton\",\n      onClick: this.toggleListen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      id: \"favIcon\",\n      className: \"far fa-stop-circle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      id: \"resetButton\",\n      onClick: this.resetTranscripts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      id: \"favIcon\",\n      className: \"fas fa-undo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      id: \"submitButton\",\n      onClick: this.submitTranscripts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      id: \"favIcon\",\n      className: \"far fa-thumbs-up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 19\n      }\n    })))))));\n  }\n\n}\n\nexport default Dictaphone;","map":{"version":3,"sources":["C:/Users/Jessm/gt/sandbox2/prototype_3/client/src/components/Dictaphone/Dictaphone.js"],"names":["React","Component","API","Button","Col","Container","Row","SpeechRecognition","window","webkitSpeechRecognition","recognition","continous","maxAlternatives","interimResults","lang","finalTranscript","interimTranscript","Dictaphone","constructor","props","toggleListen","setState","listening","state","handleListen","start","onend","stop","onresult","event","i","resultIndex","results","length","transcript","isFinal","document","getElementById","innerHTML","transcriptArr","split","stopCmd","slice","finalText","join","sentence","onerror","console","log","error","handleInputChange","preventDefault","target","name","value","bind","resetTranscripts","submitTranscripts","saveSentence","catch","err","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport API from \"../../utils/API\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport \"./Dictaphone.css\";\r\n\r\n//------------------------SPEECH RECOGNITION-----------------------------\r\n\r\nvar SpeechRecognition =\r\n  window.SpeechRecognition || window.webkitSpeechRecognition;\r\nvar recognition = new SpeechRecognition();\r\n\r\nrecognition.continous = true;\r\nrecognition.maxAlternatives = 10;\r\nrecognition.interimResults = true;\r\nrecognition.lang = \"en-US\";\r\nlet finalTranscript = \"\";\r\nlet interimTranscript = \"\";\r\n\r\n//------------------------COMPONENT-----------------------------\r\nclass Dictaphone extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // Setting state for each individual sentence before submit\r\n      sentence: \"\",\r\n      // speech recognition\r\n      listening: false,\r\n    };\r\n\r\n    this.toggleListen = this.toggleListen.bind(this);\r\n    this.handleListen = this.handleListen.bind(this);\r\n    this.resetTranscripts = this.resetTranscripts.bind(this);\r\n    this.submitTranscripts = this.submitTranscripts.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n  }\r\n\r\n  // Toggle listening commands when the Start/Stop button is pressed\r\n  toggleListen = () => {\r\n    this.setState(\r\n      {\r\n        // speech recognition\r\n        listening: !this.state.listening,\r\n      },\r\n      // speech recognition\r\n      this.handleListen\r\n    );\r\n  };\r\n\r\n  // speech recognition\r\n  handleListen = () => {\r\n    if (this.state.listening) {\r\n      recognition.start();\r\n      recognition.onend = () => {\r\n        recognition.start();\r\n      };\r\n    } else {\r\n      recognition.stop();\r\n      recognition.onend = () => {};\r\n    }\r\n\r\n    // speech recognition\r\n    // Interim and final transcript are diplayed on the screen\r\n    finalTranscript = \"\";\r\n    recognition.onresult = (event) => {\r\n      interimTranscript = \"\";\r\n      for (let i = event.resultIndex; i < event.results.length; i++) {\r\n        const transcript = event.results[i][0].transcript;\r\n        if (event.results[i].isFinal) finalTranscript += transcript + \" \";\r\n        else interimTranscript += transcript;\r\n        // console.log(finalTranscript);\r\n      }\r\n      document.getElementById(\r\n        \"interimTranscript\"\r\n      ).innerHTML = interimTranscript;\r\n      document.getElementById(\"finalTranscript\").innerHTML = finalTranscript;\r\n\r\n      //-------------------------COMMANDS------------------------------------\r\n      // speech recognition\r\n      // If the user says and the SpeechRec recognizes, \"stop listening\", the program turns off the recorder\r\n      // and stops listening if no space between the double quotes in this block then, the program reads\r\n      // everything like one big long sentence instead of individual strings\r\n      const transcriptArr = finalTranscript.split(\"  \");\r\n      const stopCmd = transcriptArr.slice(-3, -1);\r\n      // console.log(\"stopCmd\", stopCmd);\r\n      if (stopCmd[0] === \"stop\" && stopCmd[1] === \"listening\") {\r\n        recognition.stop();\r\n        recognition.onend = () => {\r\n          const finalText = transcriptArr.slice(0, -3).join(\" \");\r\n          document.getElementById(\"finalTranscript\").innerHTML = finalText;\r\n        };\r\n      }\r\n      this.setState({ sentence: transcriptArr[0] });\r\n      // console.log(transcriptArr[0]);\r\n    };\r\n\r\n    //-----------------------------------------------------------------------\r\n    // speech recognition\r\n    recognition.onerror = (event) => {\r\n      console.log(\"Error occurred in recognition: \" + event.error);\r\n    };\r\n  };\r\n\r\n  // speech recognition\r\n  // Reset the interim and final transcript to not display anymore\r\n  resetTranscripts() {\r\n    document.getElementById(\"interimTranscript\").innerHTML = interimTranscript =\r\n      \"\";\r\n    document.getElementById(\"finalTranscript\").innerHTML = finalTranscript = \"\";\r\n    // console.log(\"All Records Cleared\");\r\n  }\r\n\r\n  // speech recognition\r\n  // Handles updating component state when the user speaks into the input field\r\n  handleInputChange = (event) => {\r\n    event.preventDefault();\r\n    const { name, value } = event.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // speech recognition\r\n  // Sumbit your finalTranscript to the database\r\n  submitTranscripts() {\r\n    if (this.state.sentence) {\r\n      API.saveSentence({\r\n        sentence: this.state.sentence,\r\n      }).catch((err) => console.log(err));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div id=\"wrapper\">\r\n          <Container id=\"randomWordContainer\">\r\n            <Row id=\"randomWordRow\">\r\n              <Col id=\"randomWordCol\">\r\n                <div id=\"randomWordPlacement\">\r\n                  <br />\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n\r\n          <Container id=\"finalTranscriptContainer\">\r\n            <div id=\"interimTranscript\"></div>\r\n            <div\r\n              id=\"finalTranscript\"\r\n              value={this.state.sentence}\r\n              onChange={this.handleInputChange}\r\n            >\r\n              <br />\r\n            </div>\r\n          </Container>\r\n          <Container id=\"buttonContainer\">\r\n            <Row id=\"buttonRow\">\r\n              <Col>\r\n                <Button id=\"recordButton\" onClick={this.toggleListen}>\r\n                  <i id=\"favIcon\" className=\"far fa-stop-circle\"></i>\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button id=\"resetButton\" onClick={this.resetTranscripts}>\r\n                  <i id=\"favIcon\" className=\"fas fa-undo\"></i>\r\n                </Button>\r\n              </Col>\r\n              <Col>\r\n                <Button id=\"submitButton\" onClick={this.submitTranscripts}>\r\n                  <i id=\"favIcon\" className=\"far fa-thumbs-up\"></i>\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dictaphone;\r\n"]},"metadata":{},"sourceType":"module"}